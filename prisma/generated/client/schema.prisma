// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client" // Define explicit output path
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) // Can potentially use Clerk User ID here later
  name          String?
  email         String?   @unique // Clerk manages email uniqueness
  emailVerified DateTime?
  image         String?
  averageRating Float?
  ratingCount   Int?      @default(0)
  credits       Int       @default(1000)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // App-specific fields
  location              Location?
  skills                Skill[]
  services              Service[]
  providedExchanges     Exchange[]     @relation("Provider")
  requestedExchanges    Exchange[]     @relation("Requester")
  sentNotifications     Notification[] @relation("Sender")
  receivedNotifications Notification[] @relation("Recipient")

  // Rating relations
  ratingsGiven    Rating[] @relation("RatingsGiven")
  ratingsReceived Rating[] @relation("RatingsReceived")

  // NextAuth relations
  accounts Account[]
  sessions Session[]
  messages Message[] @relation("UserMessages")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific Models

model Location {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // New geospatial field
  coordinates Unsupported("geometry")?

  address   String?
  city      String?
  state     String?
  country   String?
  radius    Int?     @default(10) // Service radius in kilometers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([coordinates], type: Gist)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, name])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  services    Service[]
}

enum ServiceLocationType {
  REMOTE
  OWN
  CLIENT
}

model Service {
  id          String           @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    ServiceCategory? @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  hourlyRate  Float?
  isActive    Boolean          @default(true)

  // Location-related fields
  locationType  ServiceLocationType      @default(REMOTE)
  coordinates   Unsupported("geometry")?
  address       String?
  city          String?
  state         String?
  country       String?
  serviceRadius Int? // Service radius in kilometers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providedExchanges  Exchange[] @relation("ProviderService")
  requestedExchanges Exchange[] @relation("RequesterService")

  @@index([coordinates], type: Gist)
}

enum ExchangeStatus {
  REQUESTED
  ACCEPTED
  SCHEDULED
  COMPLETED
  CANCELLED
  DECLINED
}

model Exchange {
  id     String         @id @default(cuid())
  status ExchangeStatus @default(REQUESTED)

  // Services involved
  providerServiceId  String?
  providerService    Service? @relation("ProviderService", fields: [providerServiceId], references: [id])
  requesterServiceId String?
  requesterService   Service? @relation("RequesterService", fields: [requesterServiceId], references: [id])

  // Users involved
  providerId  String
  provider    User   @relation("Provider", fields: [providerId], references: [id])
  requesterId String
  requester   User   @relation("Requester", fields: [requesterId], references: [id])

  // Scheduling
  requestedDate DateTime?
  scheduledDate DateTime?
  completedDate DateTime?

  // Hours tracking
  hours Float?

  // Ratings and reviews
  providerRating  Int?    @db.SmallInt // 1-5 star rating
  requesterRating Int?    @db.SmallInt // 1-5 star rating
  providerReview  String?
  requesterReview String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Related notifications
  notifications Notification[]

  // Ratings related to this exchange
  ratings  Rating[]
  messages Message[]
}

enum NotificationType {
  EXCHANGE_REQUEST
  EXCHANGE_ACCEPTED
  EXCHANGE_DECLINED
  EXCHANGE_SCHEDULED
  EXCHANGE_CANCELLED
  EXCHANGE_COMPLETED
  EXCHANGE_REMINDER
  MESSAGE
  SYSTEM
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  message String

  // Related users
  senderId    String?
  sender      User?   @relation("Sender", fields: [senderId], references: [id])
  recipientId String
  recipient   User    @relation("Recipient", fields: [recipientId], references: [id])

  // Related exchange if applicable
  exchangeId String?
  exchange   Exchange? @relation(fields: [exchangeId], references: [id])

  // Status
  isRead Boolean @default(false)

  // Timestamps
  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model Availability {
  id        String @id @default(cuid())
  userId    String
  dayOfWeek Int // 0-6 for Sunday-Saturday
  startTime String // Format: "HH:MM"
  endTime   String // Format: "HH:MM"

  @@unique([userId, dayOfWeek, startTime, endTime])
}

// Add Rating model
model Rating {
  id      String  @id @default(cuid())
  rating  Int     @db.SmallInt // 1-5 star rating
  comment String? @db.Text

  // Users involved
  fromUserId String
  toUserId   String

  // Exchange this rating is for
  exchangeId String
  exchange   Exchange @relation(fields: [exchangeId], references: [id])
  fromUser   User     @relation("RatingsGiven", fields: [fromUserId], references: [id])
  toUser     User     @relation("RatingsReceived", fields: [toUserId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([exchangeId, fromUserId])
}

model Message {
  id         String   @id @default(uuid())
  exchangeId String
  senderId   String
  content    String
  createdAt  DateTime @default(now())
  exchange   Exchange @relation(fields: [exchangeId], references: [id])
  sender     User     @relation("UserMessages", fields: [senderId], references: [id])
}
